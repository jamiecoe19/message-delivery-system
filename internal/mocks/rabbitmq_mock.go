// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\jamie\OneDrive\Documents\go\src\mds\internal\rabbitmq.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	message "mds/internal/message"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockRabbitMQ is a mock of RabbitMQ interface.
type MockRabbitMQ struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQMockRecorder
}

// MockRabbitMQMockRecorder is the mock recorder for MockRabbitMQ.
type MockRabbitMQMockRecorder struct {
	mock *MockRabbitMQ
}

// NewMockRabbitMQ creates a new mock instance.
func NewMockRabbitMQ(ctrl *gomock.Controller) *MockRabbitMQ {
	mock := &MockRabbitMQ{ctrl: ctrl}
	mock.recorder = &MockRabbitMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQ) EXPECT() *MockRabbitMQMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockRabbitMQ) Consume(queueName string) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queueName)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockRabbitMQMockRecorder) Consume(queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockRabbitMQ)(nil).Consume), queueName)
}

// CreateQueue mocks base method.
func (m *MockRabbitMQ) CreateQueue(queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockRabbitMQMockRecorder) CreateQueue(queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockRabbitMQ)(nil).CreateQueue), queueName)
}

// DeleteQueue mocks base method.
func (m *MockRabbitMQ) DeleteQueue(queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockRabbitMQMockRecorder) DeleteQueue(queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockRabbitMQ)(nil).DeleteQueue), queueName)
}

// Publish mocks base method.
func (m *MockRabbitMQ) Publish(queueName string, message message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", queueName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitMQMockRecorder) Publish(queueName, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitMQ)(nil).Publish), queueName, message)
}
